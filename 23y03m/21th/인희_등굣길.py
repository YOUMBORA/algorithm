def solution(m, n, puddles):
    # dp 테이블 초기화
    dp = [[0] * (m+1) for _ in range(n+1)]
    # 물에 잠긴 지역은 -1로 dp 테이블 채워주기
    for x, y in puddles:
        dp[y][x] = -1
    # 집이 있는 곳의 좌표는 (1, 1)
    dp[1][1] = 1
    
    # 1행의 오른쪽으로 돌면서 해당 지점이 0이어야 하고, 위와 아래의 거리 값을 더해준 결과를 해당 지점에 더해준다.
    # 더해줄 때, 물 웅덩이가 존재한다면 이것은 빼고 더해주기로 한다.
    for y in range(1, len(dp)):
        for x in range(1, len(dp[y])):
            # 해당 지점이 0일 때(아직 가야할 칸이며 웅덩이가 없을 때)
            if dp[y][x] == 0:
                # 위 or 왼쪽에 물 웅덩이가 있으면, 남은 방향(위 or 왼쪽)에 있는 값을 해당 지점에 넣어준다.
                if dp[y][x-1] == -1:
                    dp[y][x] = dp[y-1][x]
                elif dp[y-1][x] == -1:
                    dp[y][x] = dp[y][x-1]
                # 물 웅덩이가 없으면, 위 + 왼쪽 값을 해당 지점에 넣어준다.
                else:
                    dp[y][x] = dp[y][x-1] + dp[y-1][x]
    
    # 문제에서 제시한 최단 경로의 개수를 1000000007로 나눈 나머지를 return해주기
    return dp[n][m] % 1000000007